// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250521001722_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Domain.AccountingPeriods.AccountingPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AccountingPeriods");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.ChangeInValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountingPeriodId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventSequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FundAmountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("FundAmountId")
                        .IsUnique();

                    b.ToTable("ChangeInValue");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.FundConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountingPeriodId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventSequence")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FromFundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToFundId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("FromFundId");

                    b.HasIndex("ToFundId");

                    b.ToTable("FundConversion");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountingPeriodId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.TransactionBalanceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventSequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionAccountType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionEventType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("EventDate", "EventSequence")
                        .IsUnique();

                    b.ToTable("TransactionBalanceEvent");
                });

            modelBuilder.Entity("Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountAddedBalanceEventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountAddedBalanceEventId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Accounts.AccountAddedBalanceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountingPeriodId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventSequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.ToTable("AccountAddedBalanceEvent");
                });

            modelBuilder.Entity("Domain.Accounts.AccountBalanceCheckpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountingPeriodId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountingPeriodId");

                    b.ToTable("AccountBalanceCheckpoint");
                });

            modelBuilder.Entity("Domain.Funds.Fund", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Domain.Funds.FundAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AccountAddedBalanceEventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountBalanceCheckpointId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountAddedBalanceEventId");

                    b.HasIndex("AccountBalanceCheckpointId");

                    b.HasIndex("FundId");

                    b.HasIndex("TransactionId");

                    b.ToTable("FundAmount");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.AccountingPeriod", b =>
                {
                    b.OwnsOne("Domain.AccountingPeriods.AccountingPeriodKey", "Key", b1 =>
                        {
                            b1.Property<Guid>("AccountingPeriodId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AccountingPeriodId");

                            b1.ToTable("AccountingPeriods");

                            b1.WithOwner()
                                .HasForeignKey("AccountingPeriodId");
                        });

                    b.Navigation("Key")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AccountingPeriods.ChangeInValue", b =>
                {
                    b.HasOne("Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AccountingPeriods.AccountingPeriod", null)
                        .WithMany("ChangeInValues")
                        .HasForeignKey("AccountingPeriodId");

                    b.HasOne("Domain.Funds.FundAmount", "AccountingEntry")
                        .WithOne()
                        .HasForeignKey("Domain.AccountingPeriods.ChangeInValue", "FundAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.AccountingPeriods.AccountingPeriodKey", "AccountingPeriodKey", b1 =>
                        {
                            b1.Property<Guid>("ChangeInValueId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ChangeInValueId");

                            b1.ToTable("ChangeInValue");

                            b1.WithOwner()
                                .HasForeignKey("ChangeInValueId");
                        });

                    b.Navigation("Account");

                    b.Navigation("AccountingEntry");

                    b.Navigation("AccountingPeriodKey")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AccountingPeriods.FundConversion", b =>
                {
                    b.HasOne("Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AccountingPeriods.AccountingPeriod", null)
                        .WithMany("FundConversions")
                        .HasForeignKey("AccountingPeriodId");

                    b.HasOne("Domain.Funds.Fund", "FromFund")
                        .WithMany()
                        .HasForeignKey("FromFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Funds.Fund", "ToFund")
                        .WithMany()
                        .HasForeignKey("ToFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.AccountingPeriods.AccountingPeriodKey", "AccountingPeriodKey", b1 =>
                        {
                            b1.Property<Guid>("FundConversionId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("FundConversionId");

                            b1.ToTable("FundConversion");

                            b1.WithOwner()
                                .HasForeignKey("FundConversionId");
                        });

                    b.Navigation("Account");

                    b.Navigation("AccountingPeriodKey")
                        .IsRequired();

                    b.Navigation("FromFund");

                    b.Navigation("ToFund");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.Transaction", b =>
                {
                    b.HasOne("Domain.AccountingPeriods.AccountingPeriod", "AccountingPeriod")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountingPeriod");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.TransactionBalanceEvent", b =>
                {
                    b.HasOne("Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AccountingPeriods.Transaction", "Transaction")
                        .WithMany("TransactionBalanceEvents")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.AccountingPeriods.AccountingPeriodKey", "AccountingPeriodKey", b1 =>
                        {
                            b1.Property<Guid>("TransactionBalanceEventId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TransactionBalanceEventId");

                            b1.ToTable("TransactionBalanceEvent");

                            b1.WithOwner()
                                .HasForeignKey("TransactionBalanceEventId");
                        });

                    b.Navigation("Account");

                    b.Navigation("AccountingPeriodKey")
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Accounts.Account", b =>
                {
                    b.HasOne("Domain.Accounts.AccountAddedBalanceEvent", "AccountAddedBalanceEvent")
                        .WithOne("Account")
                        .HasForeignKey("Domain.Accounts.Account", "AccountAddedBalanceEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountAddedBalanceEvent");
                });

            modelBuilder.Entity("Domain.Accounts.AccountAddedBalanceEvent", b =>
                {
                    b.HasOne("Domain.AccountingPeriods.AccountingPeriod", null)
                        .WithMany("AccountAddedBalanceEvents")
                        .HasForeignKey("AccountingPeriodId");

                    b.OwnsOne("Domain.AccountingPeriods.AccountingPeriodKey", "AccountingPeriodKey", b1 =>
                        {
                            b1.Property<Guid>("AccountAddedBalanceEventId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AccountAddedBalanceEventId");

                            b1.ToTable("AccountAddedBalanceEvent");

                            b1.WithOwner()
                                .HasForeignKey("AccountAddedBalanceEventId");
                        });

                    b.Navigation("AccountingPeriodKey")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Accounts.AccountBalanceCheckpoint", b =>
                {
                    b.HasOne("Domain.Accounts.Account", "Account")
                        .WithMany("AccountBalanceCheckpoints")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AccountingPeriods.AccountingPeriod", null)
                        .WithMany()
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Funds.FundAmount", b =>
                {
                    b.HasOne("Domain.Accounts.AccountAddedBalanceEvent", null)
                        .WithMany("FundAmounts")
                        .HasForeignKey("AccountAddedBalanceEventId");

                    b.HasOne("Domain.Accounts.AccountBalanceCheckpoint", null)
                        .WithMany("FundBalances")
                        .HasForeignKey("AccountBalanceCheckpointId");

                    b.HasOne("Domain.Funds.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AccountingPeriods.Transaction", null)
                        .WithMany("AccountingEntries")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.AccountingPeriod", b =>
                {
                    b.Navigation("AccountAddedBalanceEvents");

                    b.Navigation("ChangeInValues");

                    b.Navigation("FundConversions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.AccountingPeriods.Transaction", b =>
                {
                    b.Navigation("AccountingEntries");

                    b.Navigation("TransactionBalanceEvents");
                });

            modelBuilder.Entity("Domain.Accounts.Account", b =>
                {
                    b.Navigation("AccountBalanceCheckpoints");
                });

            modelBuilder.Entity("Domain.Accounts.AccountAddedBalanceEvent", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("FundAmounts");
                });

            modelBuilder.Entity("Domain.Accounts.AccountBalanceCheckpoint", b =>
                {
                    b.Navigation("FundBalances");
                });
#pragma warning restore 612, 618
        }
    }
}
